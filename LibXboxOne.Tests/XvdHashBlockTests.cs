using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using Xunit;

namespace LibXboxOne.Tests
{
    public class XvdHashBlockTests
    {
        [Theory]
        [InlineData(0x20001, 1, 0x5)]
        [InlineData(0x20001, 2, 0x1)]
        [InlineData(0x80004, 1, 0x13)]
        [InlineData(0x80004, 2, 0x1)]
        [InlineData(0x19001, 1, 0x4)]
        [InlineData(0x19001, 2, 0x1)]
        [InlineData(0x5F653, 1, 0xE)]
        [InlineData(0x5F653, 2, 0x1)]
        [InlineData(0x1002, 0, 0x19)]
        [InlineData(0x4202, 0, 0x64)]
        [InlineData(0x53002, 0, 0x7D0)]
        [InlineData(0x1002, 3, 0x0)]
        [InlineData(0x4202, 3, 0x3)]
        [InlineData(0x53002, 3, 0x2)]

        public void TestNumHashBlockCalculation(ulong size, ulong index, ulong expected)
        {
            ulong actual = XvdFile.CalculateNumHashBlocksInLevel(size, index);

            Assert.Equal(expected, actual);
        }

        [Theory]
        [InlineData((XvdType)0, 0x0, 0x1a97, 0x1481, 0, 0x95, 0x1f)]
        [InlineData((XvdType)0, 0x0, 0x28e1, 0x172fb6, 1, 0x62, 0x34)]
        [InlineData((XvdType)0, 0x0, 0x10077, 0x145b56, 2, 0x2e, 0x1)]
        [InlineData((XvdType)0, 0x0, 0x124aa, 0xee2, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x0, 0x124aa, 0xa008f, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x1, 0x5a6c, 0x18bcb5, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x1, 0x7c7d, 0x123a, 0, 0x4c, 0x1b)]
        [InlineData((XvdType)0, 0x1, 0x7c7d, 0xc3c93, 0, 0x31, 0x126d)]
        [InlineData((XvdType)0, 0x1, 0x9fa6, 0x13582e, 2, 0x2b, 0x1)]
        [InlineData((XvdType)0, 0x1, 0xb2eb, 0x12a, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x1, 0xb2eb, 0xe9a3, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x1, 0xb2eb, 0x9b48a3, 3, 0x2, 0x0)]
        [InlineData((XvdType)0, 0x1, 0xd61f, 0xf19, 0, 0x7d, 0x16)]
        [InlineData((XvdType)0, 0x1, 0xd61f, 0xa2d9a, 0, 0x7c, 0xf53)]
        [InlineData((XvdType)0, 0x1, 0x11608, 0x10f731, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x2, 0x1063, 0x69, 0, 0x69, 0x3)]
        [InlineData((XvdType)0, 0x2, 0x1063, 0x47f8, 0, 0x40, 0x6f)]
        [InlineData((XvdType)0, 0x2, 0x1063, 0x2ff045, 0, 0x65, 0x4833)]
        [InlineData((XvdType)0, 0x2, 0x8cc8, 0x1857, 0, 0x6f, 0x28)]
        [InlineData((XvdType)0, 0x2, 0x8cc8, 0x105081, 0, 0x37, 0x1895)]
        [InlineData((XvdType)0, 0x2, 0xbde9, 0xde5, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x2, 0xbde9, 0x940f6, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x2, 0xe118, 0x18fb, 0, 0x69, 0x29)]
        [InlineData((XvdType)0, 0x3, 0xac67, 0x1a72, 1, 0x27, 0x0)]
        [InlineData((XvdType)0, 0x3, 0xac67, 0x11a4d4, 1, 0x1, 0x28)]
        [InlineData((XvdType)0, 0x3, 0xcfed, 0x184c, 2, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x3, 0xe265, 0x16c9e2, 0, 0x18, 0x2254)]
        [InlineData((XvdType)0, 0x3, 0x107db, 0x1996, 1, 0x26, 0x0)]
        [InlineData((XvdType)0, 0x3, 0x107db, 0x11126d, 1, 0x79, 0x26)]
        [InlineData((XvdType)0, 0x3, 0x145bb, 0xdc33d, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x4, 0x9940, 0xfaa9f, 0, 0x59, 0x1799)]
        [InlineData((XvdType)0, 0x4, 0xa978, 0x147c, 1, 0x1e, 0x0)]
        [InlineData((XvdType)0, 0x4, 0xa978, 0xdb781, 1, 0x11, 0x1f)]
        [InlineData((XvdType)0, 0x5, 0x111ea, 0x972b, 1, 0x39, 0x1)]
        [InlineData((XvdType)0, 0x6, 0x8cb3, 0xd18605, 3, 0x2, 0x0)]
        [InlineData((XvdType)0, 0x6, 0xa564, 0x10d1, 0, 0x37, 0x1b)]
        [InlineData((XvdType)0, 0x6, 0xa564, 0xb3fac, 0, 0x4c, 0x10f2)]
        [InlineData((XvdType)0, 0x6, 0xa599, 0x1c38, 1, 0x2a, 0x0)]
        [InlineData((XvdType)0, 0x6, 0xdfc3, 0x46d, 0, 0x71, 0x8)]
        [InlineData((XvdType)0, 0x6, 0xdfc3, 0x306c1, 0, 0x75, 0x490)]
        [InlineData((XvdType)0, 0x7, 0xcbae, 0x1274fe, 3, 0x0, 0x0)]
        [InlineData((XvdType)0, 0x7, 0xcf95, 0x133e, 0, 0xa6, 0x1e)]
        [InlineData((XvdType)0, 0x7, 0xcf95, 0xcdb81, 0, 0x69, 0x135e)]
        [InlineData((XvdType)0, 0x7, 0xe28e, 0x2e436, 1, 0x5e, 0x6)]
        [InlineData((XvdType)0, 0x7, 0x10807, 0x550, 2, 0x0, 0x1)]
        [InlineData((XvdType)0, 0x7, 0x10807, 0x3a86c, 2, 0x8, 0x1)]
        [InlineData((XvdType)0, 0x7, 0x128e9, 0x14ed, 3, 0x0, 0x0)]
        [InlineData((XvdType)1, 0x6, 0xa564, 0xb3fac, 0, 0x4c, 0x10f2)]
        [InlineData((XvdType)2, 0x6, 0xa564, 0xb3fac, 0, 0x0, 0x0)]
        public void TestCalculateHashBlockNumForBlockNum(XvdType xvdType, ulong hashTreeLevels, ulong xvdDataBlockCount,
                                                         ulong blockNum, uint index,
                                                         ulong expectedEntryNum, ulong expectedResult)
        {
            ulong result = XvdFile.CalculateHashBlockNumForBlockNum(xvdType, hashTreeLevels, xvdDataBlockCount,
                                                                    blockNum, index, out ulong entryNumInBlock);
            
            Assert.Equal(expectedEntryNum, entryNumInBlock);
            Assert.Equal(expectedResult, result);
        }
    }
}